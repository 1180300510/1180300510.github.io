<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>数学有关的编程题</title>
    <url>/post/6591a58c.html</url>
    <content><![CDATA[<h2 id="数学相关编程题（更新中）"><a href="#数学相关编程题（更新中）" class="headerlink" title="数学相关编程题（更新中）"></a>数学相关编程题（更新中）</h2><h2 id="洛谷题目汇总（更新中）"><a href="#洛谷题目汇总（更新中）" class="headerlink" title="洛谷题目汇总（更新中）"></a>洛谷题目汇总（更新中）</h2><h3 id="1、组合数学简单应用"><a href="#1、组合数学简单应用" class="headerlink" title="1、组合数学简单应用"></a>1、组合数学简单应用</h3><blockquote>
<font size="4">求n个顶点凸边形的对角线的交点个数，其中n满足$3\leq n\leq10^5$ </font>

</blockquote>
<p>这道题可以通过寻找规律得到结果，我们知道n顶点凸多边形的每一个顶点拥有的对角线条数为n-3，从某一顶点出发画出n-3条对角线，再从其余顶点出发画n-3条对角线，分别统计其两两相交的顶点，可以找到规律，如下即为七边形（左）和十边形（右）的相交顶点数</p>
<p>将这些数（每个顶点引出的对角线的相交顶点个数）相加，可以找到和与顶点个数之间的关系，按照规律，可以猜测存在组合数学的关系，即$C_{n}^{n-4}=sum$</p>
<p><img src="https://ae01.alicdn.com/kf/H544215b82374426aba85558681f85ca8y.png" alt="math_1.png" title="math_1.png" width="50%"></p>
<p>参考了网上对该问题的解读，介绍如何直接得出sum和n之间的组合数学关系（<del>组合数学学得实在差</del>）。对于一个n顶点凸边形来说，不会存在三条对角线交于一点的情况，因此交点只由两条对角线相交形成，而两条对角线又涉及到四个顶点，因此只需要确定确定四个顶点的搭配数量，此时问题就转换成了<strong>从n个顶点中取四个不同顶点的取法</strong>，就是一个非常简单的组合数学。</p>
<p>接下来的问题就是编程解决组合数的求解。按照公式，sum=(n-3)(n-2)<em>(n-1)</em>n/4!，但是需要注意的是如果直接公式代入，即使对于unsigned long long的数据类型来说，也会造成溢出，只需做一个小的改动，sum=n<em>(n-1)/2 </em>(n-2)/3 *(n-3)/4，这也保证了sum是整数（非去下整得到的整数）。</p>
<h3 id="2、素数求解"><a href="#2、素数求解" class="headerlink" title="2、素数求解"></a>2、素数求解</h3><p>素数是因数只有1和本身的数，在编程入门题中常常会出现求素数的题，比如说求某一个范围内的所有质数，最简单的做法就是遍历这一范围的数判断是否符合素数的特征。而判断一个数n是否为素数，最简单的方法就是<strong>枚举</strong>，从2开始遍历到$sqrt(n)$,判断是否可以被n整除。但是显然这个比较的次数比较多，在一些有时间限制的情况下不适用，这里给出一个简单的改进方法，可以减少判断的次数。</p>
<p>对于所有大于等于5的素数来说，被6除的余数是1或者5，因此在判断素数时可以以6为步长进行判断，实例代码如下</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isprime</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="comment">//返回true为素数</span></span><br><span class="line">    <span class="keyword">if</span>(x&lt;=<span class="number">3</span>) <span class="keyword">return</span> x&gt;<span class="number">1</span>; </span><br><span class="line">    <span class="keyword">if</span>(x%<span class="number">6</span>!=<span class="number">1</span> &amp;&amp; x%<span class="number">6</span>!=<span class="number">5</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">int</span> num=<span class="built_in">sqrt</span>(x);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">5</span>;i&lt;=num;i+=<span class="number">6</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x%i==<span class="number">0</span>||(x%(i+<span class="number">2</span>)==<span class="number">0</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>枚举的方法时间复杂度为$O(n^2)$，如果枚举的范围比较大时，还可以采用筛法来求素数。筛法的主要思路是：从小到大考虑每一个数，然后同时把当前这个数的所有在判断范围内的倍数即为合数，那么运行结束时没有被标记的就是素数了。第一遍筛掉的就是2的倍数（不包括2），第二遍筛掉的就是3的倍数（不包括3），第三遍筛掉的是5的倍数（4已被筛掉），依次类推。</p>
<h5 id="埃拉托斯特尼筛法"><a href="#埃拉托斯特尼筛法" class="headerlink" title="埃拉托斯特尼筛法"></a>埃拉托斯特尼筛法</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Eratosthenes</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;<span class="comment">//返回的是从2到n的范围内素数的个数</span></span><br><span class="line">    <span class="keyword">int</span> prime[<span class="number">1000000</span>];<span class="comment">//保存素数</span></span><br><span class="line">    <span class="keyword">int</span> is_prime[<span class="number">1000000</span>];<span class="comment">//标记是否为素数</span></span><br><span class="line">    <span class="keyword">int</span> p=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) is_prime[i] = <span class="number">1</span>;<span class="comment">//也可调用memset函数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (is_prime[i]) &#123;</span><br><span class="line">        prime[p++] = i;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i * i; j &lt;= n;j += i)  </span><br><span class="line">      <span class="comment">// 因为从 2 到 i - 1 的倍数我们之前筛过了，这里直接从 i的平方数开始，提高了运行速度</span></span><br><span class="line">          is_prime[j] = <span class="number">0</span>;  <span class="comment">// 是i的倍数的均不是素数</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该筛法的时间复杂度为$O(nloglogn)$，列出复杂度的数学表达式为$n\sum_p 1/p$，根据调和级数可以证明，在这里不做展开。</p>
<p>继续考虑该筛法，发现对于同一个合数来说有可能被标记了很多次，比如说6，既是2的倍数，又是3的倍数，因此当每一个合数只被标记一次的时候，时间复杂度就可以变为$O(n)$，此时的线性筛法也称为欧拉筛法，主要的筛法就是每个合数只用其最小的质因数去筛。</p>
<h5 id="欧拉筛法"><a href="#欧拉筛法" class="headerlink" title="欧拉筛法"></a>欧拉筛法</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Euler</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;<span class="comment">//返回的是从2到n的范围内素数的个数</span></span><br><span class="line">    <span class="keyword">int</span> prime[<span class="number">1000000</span>];<span class="comment">//保存素数</span></span><br><span class="line">    <span class="keyword">int</span> is_prime[<span class="number">1000000</span>];<span class="comment">//标记是否为素数</span></span><br><span class="line">    <span class="keyword">int</span> p=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) is_prime[i] = <span class="number">1</span>;<span class="comment">//初始为1，也可调用memset函数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (is_prime[i])  prime[p++] = i;  </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; i*prime[j] &lt;= n;j++)&#123;  </span><br><span class="line">          is_prime[i*prime[j]]=<span class="number">0</span>;<span class="comment">//保证该合数第一次被标记</span></span><br><span class="line">          <span class="keyword">if</span>(i%prime[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>算法中最重要的是 <code>i%prime[j]==0</code>语句，当i是质数时，内层循环会在<code>prime[j]==i</code>时结束，当 i 为合数时，内层循环会在i 的第一个质因数结束。<code>is_prime[i*prime[j]]=0</code>也保证了合数被标记时是第一次标记。</p>
<p>由于在线性筛中，每一个合数都是被最小的质因数筛掉，因此在求素数的过程中也得到了每个数的最小质因子，除此之外，<strong>筛法还可以用作求欧拉函数，求约数个数，求约数和</strong>等，遇到相关问题时再做详细介绍。</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>linear_regression</title>
    <url>/post/4970fdc9.html</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>C++输入输出流介绍</title>
    <url>/post/2a664580.html</url>
    <content><![CDATA[<blockquote>
<p>C++在C的基础上设计了包含多种输入输出流的IO库，也就是iostream库，输入输出流大体上包括三种：标准输入输出流、文件输入输出流和字符串的输入输出流。</p>
</blockquote>
<h3 id="1、标准输入输出流"><a href="#1、标准输入输出流" class="headerlink" title="1、标准输入输出流"></a>1、标准输入输出流</h3><p>标准输入输出分别是cin和cout，标准错误输出是cerr。这是我们最常用的输入输出流，使用cin和cout可以实现所有类型数据的输入输出，所有接触过C++的同学都应该使用过。为了更好地理解，以cin输入流为例，介绍一下cin输入流的<strong>工作原理</strong>。</p>
<p>比如说需要输入一个int型数据：<code>int num; cin&gt;&gt;num;</code>假设我们从键盘输入“1234\n”，回车结束输入，输入的是字符串，因此流接收到的也就是字符串，流会依次检查流中的数据类型是否合格，直到遇到空格或者换行符结束。如果都合格，则将1234这些数字字符转换成数字，赋给当前变量num。</p>
<p>但是如果我们输入<strong>非法字符</strong>，比如说输入”1234abcd\n”，此时abcd就无法被cin接收，将陷入死循环，此时正确地做法（可以用在输入类型检查上）为：当在流中数据无法被接收时，将流的状态重置，并且重新从键盘输入数据。cin中定义有三个函数，<strong>cin.fail()</strong>：当读取到的字符不符合读取类型，返回true；<strong>cin.get()</strong>: 读取流中的数据；<strong>cin.clear()</strong>: 重置流</p>
<p>代码可写为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">cin</span>.fail())&#123;<span class="comment">//读取失败重置流</span></span><br><span class="line">            <span class="built_in">cin</span>.<span class="built_in">clear</span>();</span><br><span class="line">            <span class="built_in">cin</span>.<span class="built_in">get</span>();</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>cin读取字符串时，遇到空格会结束读取，但是我们有时需要读取含有空格的字符串，此时可以使用两个函数cin.get(array, size), cin.getline(array,size); 用法是类似的。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">cin</span>.<span class="built_in">get</span>(s,<span class="number">100</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>空格问题也可以使用string流解决，使用getline函数，和cin.getline()不同的是，这是定义在string库中，属于字符串的输入流。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    getline(<span class="built_in">cin</span>,str);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;str&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2、文件输入输出流"><a href="#2、文件输入输出流" class="headerlink" title="2、文件输入输出流"></a>2、文件输入输出流</h3><p>文件输入输出流定义在C++的另一个标准可fstream库中。</p>
<h4 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h4><p>文件读取或输出之前，必须先打开文件才可以进行文件的读写操作，和C中File的读取类似，打开文件函数open也定义了文件打开的不同的模式，open函数的参数是：void open(const char *filename, ios::openmode mode)，文件打开的模式如下：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">ios::app</th>
<th>所有写入都追加到文件末尾</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">ios:ate</td>
<td>文件打开后定义带文件末尾</td>
</tr>
<tr>
<td style="text-align:center">ios:in</td>
<td>打开文件用于读取</td>
</tr>
<tr>
<td style="text-align:center">ios:out</td>
<td>打开文件用于写入</td>
</tr>
<tr>
<td style="text-align:center">ios:trunc</td>
<td>如果该文件存在，内容在打开文件之前被截断</td>
</tr>
<tr>
<td style="text-align:center">ios:binary</td>
<td>二进制方式</td>
</tr>
</tbody>
</table>
</div>
<p>文件打开的模式可以结合使用。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ofstream outfile;</span><br><span class="line">outfile.<span class="built_in">open</span>(<span class="string">"file.txt"</span>, ios::in|ios::out|ios::binary);</span><br></pre></td></tr></table></figure>
<p>除了调用open函数之外，因为在stream类的构造函数中调用了open函数，还可以直接调用默认的文件打开方式，比如<code>ofstream out(&quot;file.txt&quot;), ifstream in(&quot;file.txt&quot;), fstream foi(&quot;file.txt&quot;);</code></p>
<p><strong>读取和写入文件</strong></p>
<p>读取文件使用ifstream对象，写入文件使用ofstream对象，读写文件使用fstream对象。</p>
<h4 id="对txt文件读取和写入实例"><a href="#对txt文件读取和写入实例" class="headerlink" title="对txt文件读取和写入实例"></a>对txt文件读取和写入实例</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo的Latex公式渲染</title>
    <url>/post/856f669.html</url>
    <content><![CDATA[<h3 id="问题的发现"><a href="#问题的发现" class="headerlink" title="问题的发现"></a>问题的发现</h3><blockquote>
<font size="4">在本地撰写博客时，通常会使用到数学公式，而在之前的学习中我们已经学习了LaTeX的基本语法，所以在本地的md文件编写中，我们写出来了不错的数学公式。然而，令人悲伤的故事发生了，当我将本地md文件上传到我的博客上时，LaTeX语法失效了，专业的说法就是渲染失败。对网页渲染一无所知的我还是走上了搜索的老路，在查阅相关资料之后，在这里做一个记录。</font>



</blockquote>
<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>Hexo默认使用hexo-renderer-marked的引擎来渲染网页，该引擎会将一些markdown符号转换为相应的html标签，比如加粗，斜体，代码块，引用等。Typora使用MathJax引擎来渲染公式，对于某些符号会和hexo-renderer-marked的引擎产生含义的冲突，因此就会出现渲染失败的情况。</p>
<p>举一个简单的例子，公式中如果出现两个“<em>”，那么这两个 “\</em>”之间的字体就会变成斜体，而又出现两个下划线“_”时，公式中出现斜体的内容就被渲染成了\<em>标签：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;em&gt;&#125;)&#x3D;\frac&#123;x-x^&lt;&#x2F;em&gt;</span><br></pre></td></tr></table></figure>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="修改渲染引擎"><a href="#修改渲染引擎" class="headerlink" title="修改渲染引擎"></a>修改渲染引擎</h4><p>最直接的方法就是替换hexo的渲染引擎，其中有一个是hexo-renderer-marked的改进版hexo-renderer-kramed，在git中执行下面的命令即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure>
<p>对于上述出现的冲突做出了修改，但只是解决了公式块的语义冲突，行内代码仍然需要我们再一步进行修改。</p>
<p>在博客的根目录下找到<strong>node_modules/kramed/lib/rules/inline.js​</strong>文件，修改其inline变量如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> inline = &#123;</span><br><span class="line">  <span class="comment">//escape: /^\\([\\`*&#123;&#125;\[\]()#$+\-.!_&gt;])/,</span></span><br><span class="line">  <span class="built_in">escape</span>: <span class="regexp">/^\\([`*\[\]()#$+\-.!_&gt;])/</span>,</span><br><span class="line">  autolink: <span class="regexp">/^&lt;([^ &gt;]+(@|:\/)[^ &gt;]+)&gt;/</span>,</span><br><span class="line">  url: noop,</span><br><span class="line">  html: <span class="regexp">/^&lt;!--[\s\S]*?--&gt;|^&lt;(\w+(?!:\/|[^\w\s@]*@)\b)*?(?:"[^"]*"|'[^']*'|[^'"&gt;])*?&gt;([\s\S]*?)?&lt;\/\1&gt;|^&lt;(\w+(?!:\/|[^\w\s@]*@)\b)(?:"[^"]*"|'[^']*'|[^'"&gt;])*?&gt;/</span>,</span><br><span class="line">  link: <span class="regexp">/^!?\[(inside)\]\(href\)/</span>,</span><br><span class="line">  reflink: <span class="regexp">/^!?\[(inside)\]\s*\[([^\]]*)\]/</span>,</span><br><span class="line">  nolink: <span class="regexp">/^!?\[((?:\[[^\]]*\]|[^\[\]])*)\]/</span>,</span><br><span class="line">  reffn: <span class="regexp">/^!?\[\^(inside)\]/</span>,</span><br><span class="line">  strong: <span class="regexp">/^__([\s\S]+?)__(?!_)|^\*\*([\s\S]+?)\*\*(?!\*)/</span>,</span><br><span class="line">  <span class="comment">//em: /^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span></span><br><span class="line">  em: <span class="regexp">/^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span>,</span><br><span class="line">  code: <span class="regexp">/^(`+)\s*([\s\S]*?[^`])\s*\1(?!`)/</span>,</span><br><span class="line">  br: <span class="regexp">/^ &#123;2,&#125;\n(?!\s*$)/</span>,</span><br><span class="line">  del: noop,</span><br><span class="line">  text: <span class="regexp">/^[\s\S]+?(?=[\\&lt;!\[_*`$]| &#123;2,&#125;\n|$)/</span>,</span><br><span class="line">  math: <span class="regexp">/^\$\$\s*([\s\S]*?[^\$])\s*\$\$(?!\$)/</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>escape去掉对\ , { , }这三个符号的转义， em去掉了\<em>标签的转义。</em></p>
<h4 id="修改主题配置文件"><a href="#修改主题配置文件" class="headerlink" title="修改主题配置文件"></a>修改主题配置文件</h4><p>在Theme的目录下，修改_config.yml主题配置文件，修改math项</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Math Formulas Render Support</span></span><br><span class="line"><span class="attr">math:</span></span><br><span class="line">  <span class="comment"># Default (true) will load mathjax / katex script on demand.</span></span><br><span class="line">  <span class="comment"># That is it only render those page which has `mathjax: true` in Front-matter.</span></span><br><span class="line">  <span class="comment"># If you set it to false, it will load mathjax / katex srcipt EVERY PAGE.</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># hexo-renderer-pandoc (or hexo-renderer-kramed) required for full MathJax support.</span></span><br><span class="line">  <span class="attr">mathjax:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># See: https://mhchem.github.io/MathJax-mhchem/</span></span><br><span class="line">    <span class="attr">mhchem:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># hexo-renderer-markdown-it-plus (or hexo-renderer-markdown-it with markdown-it-katex plugin) required for full Katex support.</span></span><br><span class="line">  <span class="attr">katex:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># See: https://github.com/KaTeX/KaTeX/tree/master/contrib/copy-tex</span></span><br><span class="line">    <span class="attr">copy_tex:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>这里我使用MathJax作为LaTeX的渲染工具，因此将enable置为true，mhchem是化学的相关公式，可以根据个人需要，katex是另一种数学公式的渲染工具，由于同时只能使用一种，因此enable置为false。</p>
<p>对于需要使用LaTeX公式的文章，在文章的Front-matter中置mathjax为true。</p>
<p>这是我的另一篇博文的Front-matter</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: 数学有关的算法题</span><br><span class="line">categories: Algorithm</span><br><span class="line">tags: Algorithm</span><br><span class="line">mathjax: true</span><br><span class="line">abbrlink: 6591a58c</span><br><span class="line">date: 2020-08-09 18:21:57</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello, My Blog!</title>
    <url>/post/cd2b7135.html</url>
    <content><![CDATA[<h2 id="I-want-to-test-whether-the-article-can-subscribe-to-my-blog"><a href="#I-want-to-test-whether-the-article-can-subscribe-to-my-blog" class="headerlink" title="I want to test whether the article can subscribe to my blog!"></a>I want to test whether the article can subscribe to my blog!</h2>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title>机器学习的基本知识</title>
    <url>/post/c1a7cca9.html</url>
    <content><![CDATA[<h3 id="1、机器学习的定义"><a href="#1、机器学习的定义" class="headerlink" title="1、机器学习的定义"></a>1、机器学习的定义</h3><p> 机器学习并不存在一个广泛认可的定义，这里给出两位前辈对机器学习的定义。Arthur Samuel提出的是一个旧的非正式的定义：机器学习是一个在不使用显式编程的情况下，给予计算机学习能力的领域。</p>
<p>Tom Mitchell给出一个更现代化的定义：一个程序被认为能从经验E中学习，解决任务T，达到一个性能度量值P，当且仅当有了经验E之后，经过P评判，程序在处理T时的性能有所提升，并且当且仅当有了经验E之后，经过P评判，程序在处理T时的性能有所提升。一个非常应景的例子就是AI下棋，任务T是下棋，经验E就是上万次自我对弈联系的经验，而度量值T就是AI和新的对手下棋时，赢得比赛的概率。</p>
<h3 id="2、监督学习（supervised-learning）"><a href="#2、监督学习（supervised-learning）" class="headerlink" title="2、监督学习（supervised learning）"></a>2、监督学习（supervised learning）</h3><p>给定一个数据集，我们事先已经知道了结果，或者说<strong>正确答案</strong>，而监督学习算法正是对该数据集做一种预测，是处于输入和输出之间的桥梁。监督学习可以分成两大类：回归和分类。在回归问题中，预测结果将是一个连续的输出，意味着需要将输入的变量映射到某个连续函数中，线性，二次函数等，因此也就有了线性回归，二次回归等。而在分类问题中，预测结果将是一个离散的输出，也就是若干个离散点的集合。</p>
<p>一个回归问题的例子：给定一个房子大小和价格的数据集，预测某大小的房子的价格。而大小和价格之间可以使用一个连续函数来近似地表示，因此这就是一个回归问题。</p>
<p>一个分类问题的例子：编写一个软件来检查客户的账户是否遭受过黑客的入侵，这就是一个典型的分类问题，可以将每个账户（样本）标记为正样本和负样本，比如可以用0表示预测为安全，1表示预测为账户被入侵。因此就可以使用监督学习来预测每一个离散值。</p>
<h3 id="3、无监督学习（unsupervised-learning）"><a href="#3、无监督学习（unsupervised-learning）" class="headerlink" title="3、无监督学习（unsupervised learning）"></a>3、无监督学习（unsupervised learning）</h3><p>无监督学习和监督学习最大的不同就是给定的数据集并<strong>没有标签或者属性</strong>，也可以认为所有的数据都是一样的，没有区别的。而我们事先是不知道指一些数据会拥有什么意思，就像在一堆杂乱的东西中找到某一些共同的东西或结构。无监督学习中最重要的算法之一就是聚类算法，这里仅仅做一个简单介绍。</p>
<p>一个无监督学习的例子，就是Google新闻的分类，他们从网络上手机成千上万的网络上的新闻，然后将他们分组，组成一个个新闻专题，而这些都是通过无监督学习，讲这些数量很大的行为自动的聚合在一起，即有关同一主题的新闻被聚集在一起，可能是来自BBC，CNN等不同报道。</p>
<p>无监督学习算法还有一些比较经典的应用，比如说鸡尾酒宴问题，最简单的鸡尾酒宴问题就是输入两个录音，每个录音来自两个麦克风，记录两个人同步说话的声音。使用<strong>“鸡尾酒会算法”</strong>从录音输入中找到蕴含的分类，分离出两个被叠加在一起的音频源，也可以将环境声音分离。</p>
]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
      </tags>
  </entry>
</search>
